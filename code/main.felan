byte :: i8;
ubyte :: u8;

short :: i16;
ushort :: u16;

int :: i32;
uint :: u32;

long :: i64;
ulong :: u64;

// short_float :: f16;
float :: f32;
double :: f64;
long_double :: f128;

usize :: u64;

main :: () -> void {
  a := 2;
  println(@typeOf(a) == i64);
};

print_rev :: (value:u64) -> void {
  putc 'a';
  value := value;
  while {
    putc '0' + @cast(value % 10,u8);
    value /= 10;
    value != 0;
  } {}
};

print_rev :: (value:i64) -> void {
  putc 'b';
  value := value;
  while {
    putc '0' + @cast(value % 10,u8);
    value /= 10;
    value != 0;
  } {}
};

print :: (value:bool) -> void {
  if value {
    putc 't';
    putc 'r';
    putc 'u';
    putc 'e';
  } else {
    putc 'f';
    putc 'a';
    putc 'l';
    putc 's';
    putc 'e';
  }
};

println :: (value:bool) -> void {
  print(value);
  putc '\n';
};
